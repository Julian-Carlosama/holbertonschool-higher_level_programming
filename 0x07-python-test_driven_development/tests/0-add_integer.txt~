The ``0-add_integer`` module
======================

Using ``factorial``
-------------------

This is an example text file in reStructuredText format.  First import
``factorial`` from the ``example`` module:

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(3.09, 4)
7
>>> add_integer(5, 2.20)
7
>>> add_integer(3.78, 5.90)
8
>>> add_integer(-9, -5)
-14
>>> add_integer(-3, 7)
4
>> add_integer(-90)
8
>>> add_integer("Juli", 3)
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer(3, "Juli")
Tradeback(most recent call last):
...
TypeError: a must be an integer
>>> add_integer('Hello')
Tradeback(most recent call last):
...
TypeError: a must be an integer
>>> add_integer("Str1", "Str2")
Tradeback(most recent call last):
...
TypeError: a must be an integer
>>> add_integer((1, 2, 3))
Tradeback(most recent call last):
...
TypeError: a must be an integer
>>> add_integer([1, 2, 3])
Tradeback(most recent call last):
...
TypeError: a must be an integer
>>> add_integer(None)
Tradeback(most recent call last):
...TypeError: a must be an integer
>>> add_integer(float('int', float('.int')))
Tradeback(most recent call last):
...
OverflowError: cannot convert float infinity to integer
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
>>> add_integer(0, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

